{"ast":null,"code":"/**\n * @license Angular v12.1.5\n * (c) 2010-2021 Google LLC. https://angular.io/\n * License: MIT\n */\nimport { DOCUMENT, XhrFactory as XhrFactory$1, ɵparseCookieValue } from '@angular/common';\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, Injector, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nclass HttpHandler {}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\n\n\nclass HttpBackend {}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\n\n\nclass HttpHeaders {\n  /**  Constructs a new HTTP header object with the given values.*/\n  constructor(headers) {\n    /**\n     * Internal map of lowercased header names to the normalized\n     * form of the name (the form seen first).\n     */\n    this.normalizedNames = new Map();\n    /**\n     * Queued updates to be materialized the next initialization.\n     */\n\n    this.lazyUpdate = null;\n\n    if (!headers) {\n      this.headers = new Map();\n    } else if (typeof headers === 'string') {\n      this.lazyInit = () => {\n        this.headers = new Map();\n        headers.split('\\n').forEach(line => {\n          const index = line.indexOf(':');\n\n          if (index > 0) {\n            const name = line.slice(0, index);\n            const key = name.toLowerCase();\n            const value = line.slice(index + 1).trim();\n            this.maybeSetNormalizedName(name, key);\n\n            if (this.headers.has(key)) {\n              this.headers.get(key).push(value);\n            } else {\n              this.headers.set(key, [value]);\n            }\n          }\n        });\n      };\n    } else {\n      this.lazyInit = () => {\n        this.headers = new Map();\n        Object.keys(headers).forEach(name => {\n          let values = headers[name];\n          const key = name.toLowerCase();\n\n          if (typeof values === 'string') {\n            values = [values];\n          }\n\n          if (values.length > 0) {\n            this.headers.set(key, values);\n            this.maybeSetNormalizedName(name, key);\n          }\n        });\n      };\n    }\n  }\n  /**\n   * Checks for existence of a given header.\n   *\n   * @param name The header name to check for existence.\n   *\n   * @returns True if the header exists, false otherwise.\n   */\n\n\n  has(name) {\n    this.init();\n    return this.headers.has(name.toLowerCase());\n  }\n  /**\n   * Retrieves the first value of a given header.\n   *\n   * @param name The header name.\n   *\n   * @returns The value string if the header exists, null otherwise\n   */\n\n\n  get(name) {\n    this.init();\n    const values = this.headers.get(name.toLowerCase());\n    return values && values.length > 0 ? values[0] : null;\n  }\n  /**\n   * Retrieves the names of the headers.\n   *\n   * @returns A list of header names.\n   */\n\n\n  keys() {\n    this.init();\n    return Array.from(this.normalizedNames.values());\n  }\n  /**\n   * Retrieves a list of values for a given header.\n   *\n   * @param name The header name from which to retrieve values.\n   *\n   * @returns A string of values if the header exists, null otherwise.\n   */\n\n\n  getAll(name) {\n    this.init();\n    return this.headers.get(name.toLowerCase()) || null;\n  }\n  /**\n   * Appends a new value to the existing set of values for a header\n   * and returns them in a clone of the original instance.\n   *\n   * @param name The header name for which to append the values.\n   * @param value The value to append.\n   *\n   * @returns A clone of the HTTP headers object with the value appended to the given header.\n   */\n\n\n  append(name, value) {\n    return this.clone({\n      name,\n      value,\n      op: 'a'\n    });\n  }\n  /**\n   * Sets or modifies a value for a given header in a clone of the original instance.\n   * If the header already exists, its value is replaced with the given value\n   * in the returned object.\n   *\n   * @param name The header name.\n   * @param value The value or values to set or overide for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the newly set header value.\n   */\n\n\n  set(name, value) {\n    return this.clone({\n      name,\n      value,\n      op: 's'\n    });\n  }\n  /**\n   * Deletes values for a given header in a clone of the original instance.\n   *\n   * @param name The header name.\n   * @param value The value or values to delete for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the given value deleted.\n   */\n\n\n  delete(name, value) {\n    return this.clone({\n      name,\n      value,\n      op: 'd'\n    });\n  }\n\n  maybeSetNormalizedName(name, lcName) {\n    if (!this.normalizedNames.has(lcName)) {\n      this.normalizedNames.set(lcName, name);\n    }\n  }\n\n  init() {\n    if (!!this.lazyInit) {\n      if (this.lazyInit instanceof HttpHeaders) {\n        this.copyFrom(this.lazyInit);\n      } else {\n        this.lazyInit();\n      }\n\n      this.lazyInit = null;\n\n      if (!!this.lazyUpdate) {\n        this.lazyUpdate.forEach(update => this.applyUpdate(update));\n        this.lazyUpdate = null;\n      }\n    }\n  }\n\n  copyFrom(other) {\n    other.init();\n    Array.from(other.headers.keys()).forEach(key => {\n      this.headers.set(key, other.headers.get(key));\n      this.normalizedNames.set(key, other.normalizedNames.get(key));\n    });\n  }\n\n  clone(update) {\n    const clone = new HttpHeaders();\n    clone.lazyInit = !!this.lazyInit && this.lazyInit instanceof HttpHeaders ? this.lazyInit : this;\n    clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n    return clone;\n  }\n\n  applyUpdate(update) {\n    const key = update.name.toLowerCase();\n\n    switch (update.op) {\n      case 'a':\n      case 's':\n        let value = update.value;\n\n        if (typeof value === 'string') {\n          value = [value];\n        }\n\n        if (value.length === 0) {\n          return;\n        }\n\n        this.maybeSetNormalizedName(update.name, key);\n        const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n        base.push(...value);\n        this.headers.set(key, base);\n        break;\n\n      case 'd':\n        const toDelete = update.value;\n\n        if (!toDelete) {\n          this.headers.delete(key);\n          this.normalizedNames.delete(key);\n        } else {\n          let existing = this.headers.get(key);\n\n          if (!existing) {\n            return;\n          }\n\n          existing = existing.filter(value => toDelete.indexOf(value) === -1);\n\n          if (existing.length === 0) {\n            this.headers.delete(key);\n            this.normalizedNames.delete(key);\n          } else {\n            this.headers.set(key, existing);\n          }\n        }\n\n        break;\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  forEach(fn) {\n    this.init();\n    Array.from(this.normalizedNames.keys()).forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\n\n\nclass HttpUrlEncodingCodec {\n  /**\n   * Encodes a key name for a URL parameter or query-string.\n   * @param key The key name.\n   * @returns The encoded key name.\n   */\n  encodeKey(key) {\n    return standardEncoding(key);\n  }\n  /**\n   * Encodes the value of a URL parameter or query-string.\n   * @param value The value.\n   * @returns The encoded value.\n   */\n\n\n  encodeValue(value) {\n    return standardEncoding(value);\n  }\n  /**\n   * Decodes an encoded URL parameter or query-string key.\n   * @param key The encoded key name.\n   * @returns The decoded key name.\n   */\n\n\n  decodeKey(key) {\n    return decodeURIComponent(key);\n  }\n  /**\n   * Decodes an encoded URL parameter or query-string value.\n   * @param value The encoded value.\n   * @returns The decoded value.\n   */\n\n\n  decodeValue(value) {\n    return decodeURIComponent(value);\n  }\n\n}\n\nfunction paramParser(rawParams, codec) {\n  const map = new Map();\n\n  if (rawParams.length > 0) {\n    // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n    // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n    // may start with the `?` char, so we strip it if it's present.\n    const params = rawParams.replace(/^\\?/, '').split('&');\n    params.forEach(param => {\n      const eqIdx = param.indexOf('=');\n      const [key, val] = eqIdx == -1 ? [codec.decodeKey(param), ''] : [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n      const list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n\n  return map;\n}\n\nfunction standardEncoding(v) {\n  return encodeURIComponent(v).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/gi, '$').replace(/%2C/gi, ',').replace(/%3B/gi, ';').replace(/%2B/gi, '+').replace(/%3D/gi, '=').replace(/%3F/gi, '?').replace(/%2F/gi, '/');\n}\n\nfunction valueToString(value) {\n  return `${value}`;\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\n\n\nclass HttpParams {\n  constructor(options = {}) {\n    this.updates = null;\n    this.cloneFrom = null;\n    this.encoder = options.encoder || new HttpUrlEncodingCodec();\n\n    if (!!options.fromString) {\n      if (!!options.fromObject) {\n        throw new Error(`Cannot specify both fromString and fromObject.`);\n      }\n\n      this.map = paramParser(options.fromString, this.encoder);\n    } else if (!!options.fromObject) {\n      this.map = new Map();\n      Object.keys(options.fromObject).forEach(key => {\n        const value = options.fromObject[key];\n        this.map.set(key, Array.isArray(value) ? value : [value]);\n      });\n    } else {\n      this.map = null;\n    }\n  }\n  /**\n   * Reports whether the body includes one or more values for a given parameter.\n   * @param param The parameter name.\n   * @returns True if the parameter has one or more values,\n   * false if it has no value or is not present.\n   */\n\n\n  has(param) {\n    this.init();\n    return this.map.has(param);\n  }\n  /**\n   * Retrieves the first value for a parameter.\n   * @param param The parameter name.\n   * @returns The first value of the given parameter,\n   * or `null` if the parameter is not present.\n   */\n\n\n  get(param) {\n    this.init();\n    const res = this.map.get(param);\n    return !!res ? res[0] : null;\n  }\n  /**\n   * Retrieves all values for a  parameter.\n   * @param param The parameter name.\n   * @returns All values in a string array,\n   * or `null` if the parameter not present.\n   */\n\n\n  getAll(param) {\n    this.init();\n    return this.map.get(param) || null;\n  }\n  /**\n   * Retrieves all the parameters for this body.\n   * @returns The parameter names in a string array.\n   */\n\n\n  keys() {\n    this.init();\n    return Array.from(this.map.keys());\n  }\n  /**\n   * Appends a new value to existing values for a parameter.\n   * @param param The parameter name.\n   * @param value The new value to add.\n   * @return A new body with the appended value.\n   */\n\n\n  append(param, value) {\n    return this.clone({\n      param,\n      value,\n      op: 'a'\n    });\n  }\n  /**\n   * Constructs a new body with appended values for the given parameter name.\n   * @param params parameters and values\n   * @return A new body with the new value.\n   */\n\n\n  appendAll(params) {\n    const updates = [];\n    Object.keys(params).forEach(param => {\n      const value = params[param];\n\n      if (Array.isArray(value)) {\n        value.forEach(_value => {\n          updates.push({\n            param,\n            value: _value,\n            op: 'a'\n          });\n        });\n      } else {\n        updates.push({\n          param,\n          value: value,\n          op: 'a'\n        });\n      }\n    });\n    return this.clone(updates);\n  }\n  /**\n   * Replaces the value for a parameter.\n   * @param param The parameter name.\n   * @param value The new value.\n   * @return A new body with the new value.\n   */\n\n\n  set(param, value) {\n    return this.clone({\n      param,\n      value,\n      op: 's'\n    });\n  }\n  /**\n   * Removes a given value or all values from a parameter.\n   * @param param The parameter name.\n   * @param value The value to remove, if provided.\n   * @return A new body with the given value removed, or with all values\n   * removed if no value is specified.\n   */\n\n\n  delete(param, value) {\n    return this.clone({\n      param,\n      value,\n      op: 'd'\n    });\n  }\n  /**\n   * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n   * separated by `&`s.\n   */\n\n\n  toString() {\n    this.init();\n    return this.keys().map(key => {\n      const eKey = this.encoder.encodeKey(key); // `a: ['1']` produces `'a=1'`\n      // `b: []` produces `''`\n      // `c: ['1', '2']` produces `'c=1&c=2'`\n\n      return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value)).join('&');\n    }) // filter out empty values because `b: []` produces `''`\n    // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n    .filter(param => param !== '').join('&');\n  }\n\n  clone(update) {\n    const clone = new HttpParams({\n      encoder: this.encoder\n    });\n    clone.cloneFrom = this.cloneFrom || this;\n    clone.updates = (this.updates || []).concat(update);\n    return clone;\n  }\n\n  init() {\n    if (this.map === null) {\n      this.map = new Map();\n    }\n\n    if (this.cloneFrom !== null) {\n      this.cloneFrom.init();\n      this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));\n      this.updates.forEach(update => {\n        switch (update.op) {\n          case 'a':\n          case 's':\n            const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\n            base.push(valueToString(update.value));\n            this.map.set(update.param, base);\n            break;\n\n          case 'd':\n            if (update.value !== undefined) {\n              let base = this.map.get(update.param) || [];\n              const idx = base.indexOf(valueToString(update.value));\n\n              if (idx !== -1) {\n                base.splice(idx, 1);\n              }\n\n              if (base.length > 0) {\n                this.map.set(update.param, base);\n              } else {\n                this.map.delete(update.param);\n              }\n            } else {\n              this.map.delete(update.param);\n              break;\n            }\n\n        }\n      });\n      this.cloneFrom = this.updates = null;\n    }\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @publicApi\n */\n\n\nclass HttpContextToken {\n  constructor(defaultValue) {\n    this.defaultValue = defaultValue;\n  }\n\n}\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```typescript\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @publicApi\n */\n\n\nclass HttpContext {\n  constructor() {\n    this.map = new Map();\n  }\n  /**\n   * Store a value in the context. If a value is already present it will be overwritten.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   * @param value The value to store.\n   *\n   * @returns A reference to itself for easy chaining.\n   */\n\n\n  set(token, value) {\n    this.map.set(token, value);\n    return this;\n  }\n  /**\n   * Retrieve the value associated with the given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns The stored value or default if one is defined.\n   */\n\n\n  get(token) {\n    if (!this.map.has(token)) {\n      this.map.set(token, token.defaultValue());\n    }\n\n    return this.map.get(token);\n  }\n  /**\n   * Delete the value associated with the given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns A reference to itself for easy chaining.\n   */\n\n\n  delete(token) {\n    this.map.delete(token);\n    return this;\n  }\n  /**\n   * @returns a list of tokens currently stored in the context.\n   */\n\n\n  keys() {\n    return this.map.keys();\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Determine whether the given HTTP method may include a body.\n */\n\n\nfunction mightHaveBody(method) {\n  switch (method) {\n    case 'DELETE':\n    case 'GET':\n    case 'HEAD':\n    case 'OPTIONS':\n    case 'JSONP':\n      return false;\n\n    default:\n      return true;\n  }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\n\n\nfunction isArrayBuffer(value) {\n  return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\n\n\nfunction isBlob(value) {\n  return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\n\n\nfunction isFormData(value) {\n  return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * Safely assert whether the given value is a URLSearchParams instance.\n *\n * In some execution environments URLSearchParams is not defined.\n */\n\n\nfunction isUrlSearchParams(value) {\n  return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\n\n\nclass HttpRequest {\n  constructor(method, url, third, fourth) {\n    this.url = url;\n    /**\n     * The request body, or `null` if one isn't set.\n     *\n     * Bodies are not enforced to be immutable, as they can include a reference to any\n     * user-defined data type. However, interceptors should take care to preserve\n     * idempotence by treating them as such.\n     */\n\n    this.body = null;\n    /**\n     * Whether this request should be made in a way that exposes progress events.\n     *\n     * Progress events are expensive (change detection runs on each event) and so\n     * they should only be requested if the consumer intends to monitor them.\n     */\n\n    this.reportProgress = false;\n    /**\n     * Whether this request should be sent with outgoing credentials (cookies).\n     */\n\n    this.withCredentials = false;\n    /**\n     * The expected response type of the server.\n     *\n     * This is used to parse the response appropriately before returning it to\n     * the requestee.\n     */\n\n    this.responseType = 'json';\n    this.method = method.toUpperCase(); // Next, need to figure out which argument holds the HttpRequestInit\n    // options, if any.\n\n    let options; // Check whether a body argument is expected. The only valid way to omit\n    // the body argument is to use a known no-body method like GET.\n\n    if (mightHaveBody(this.method) || !!fourth) {\n      // Body is the third argument, options are the fourth.\n      this.body = third !== undefined ? third : null;\n      options = fourth;\n    } else {\n      // No body required, options are the third argument. The body stays null.\n      options = third;\n    } // If options have been passed, interpret them.\n\n\n    if (options) {\n      // Normalize reportProgress and withCredentials.\n      this.reportProgress = !!options.reportProgress;\n      this.withCredentials = !!options.withCredentials; // Override default response type of 'json' if one is provided.\n\n      if (!!options.responseType) {\n        this.responseType = options.responseType;\n      } // Override headers if they're provided.\n\n\n      if (!!options.headers) {\n        this.headers = options.headers;\n      }\n\n      if (!!options.context) {\n        this.context = options.context;\n      }\n\n      if (!!options.params) {\n        this.params = options.params;\n      }\n    } // If no headers have been passed in, construct a new HttpHeaders instance.\n\n\n    if (!this.headers) {\n      this.headers = new HttpHeaders();\n    } // If no context have been passed in, construct a new HttpContext instance.\n\n\n    if (!this.context) {\n      this.context = new HttpContext();\n    } // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n\n\n    if (!this.params) {\n      this.params = new HttpParams();\n      this.urlWithParams = url;\n    } else {\n      // Encode the parameters to a string in preparation for inclusion in the URL.\n      const params = this.params.toString();\n\n      if (params.length === 0) {\n        // No parameters, the visible URL is just the URL given at creation time.\n        this.urlWithParams = url;\n      } else {\n        // Does the URL already have query parameters? Look for '?'.\n        const qIdx = url.indexOf('?'); // There are 3 cases to handle:\n        // 1) No existing parameters -> append '?' followed by params.\n        // 2) '?' exists and is followed by existing query string ->\n        //    append '&' followed by params.\n        // 3) '?' exists at the end of the url -> append params directly.\n        // This basically amounts to determining the character, if any, with\n        // which to join the URL and parameters.\n\n        const sep = qIdx === -1 ? '?' : qIdx < url.length - 1 ? '&' : '';\n        this.urlWithParams = url + sep + params;\n      }\n    }\n  }\n  /**\n   * Transform the free-form body into a serialized format suitable for\n   * transmission to the server.\n   */\n\n\n  serializeBody() {\n    // If no body is present, no need to serialize it.\n    if (this.body === null) {\n      return null;\n    } // Check whether the body is already in a serialized form. If so,\n    // it can just be returned directly.\n\n\n    if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) || isUrlSearchParams(this.body) || typeof this.body === 'string') {\n      return this.body;\n    } // Check whether the body is an instance of HttpUrlEncodedParams.\n\n\n    if (this.body instanceof HttpParams) {\n      return this.body.toString();\n    } // Check whether the body is an object or array, and serialize with JSON if so.\n\n\n    if (typeof this.body === 'object' || typeof this.body === 'boolean' || Array.isArray(this.body)) {\n      return JSON.stringify(this.body);\n    } // Fall back on toString() for everything else.\n\n\n    return this.body.toString();\n  }\n  /**\n   * Examine the body and attempt to infer an appropriate MIME type\n   * for it.\n   *\n   * If no such type can be inferred, this method will return `null`.\n   */\n\n\n  detectContentTypeHeader() {\n    // An empty body has no content type.\n    if (this.body === null) {\n      return null;\n    } // FormData bodies rely on the browser's content type assignment.\n\n\n    if (isFormData(this.body)) {\n      return null;\n    } // Blobs usually have their own content type. If it doesn't, then\n    // no type can be inferred.\n\n\n    if (isBlob(this.body)) {\n      return this.body.type || null;\n    } // Array buffers have unknown contents and thus no type can be inferred.\n\n\n    if (isArrayBuffer(this.body)) {\n      return null;\n    } // Technically, strings could be a form of JSON data, but it's safe enough\n    // to assume they're plain strings.\n\n\n    if (typeof this.body === 'string') {\n      return 'text/plain';\n    } // `HttpUrlEncodedParams` has its own content-type.\n\n\n    if (this.body instanceof HttpParams) {\n      return 'application/x-www-form-urlencoded;charset=UTF-8';\n    } // Arrays, objects, boolean and numbers will be encoded as JSON.\n\n\n    if (typeof this.body === 'object' || typeof this.body === 'number' || typeof this.body === 'boolean') {\n      return 'application/json';\n    } // No type could be inferred.\n\n\n    return null;\n  }\n\n  clone(update = {}) {\n    var _a; // For method, url, and responseType, take the current value unless\n    // it is overridden in the update hash.\n\n\n    const method = update.method || this.method;\n    const url = update.url || this.url;\n    const responseType = update.responseType || this.responseType; // The body is somewhat special - a `null` value in update.body means\n    // whatever current body is present is being overridden with an empty\n    // body, whereas an `undefined` value in update.body implies no\n    // override.\n\n    const body = update.body !== undefined ? update.body : this.body; // Carefully handle the boolean options to differentiate between\n    // `false` and `undefined` in the update args.\n\n    const withCredentials = update.withCredentials !== undefined ? update.withCredentials : this.withCredentials;\n    const reportProgress = update.reportProgress !== undefined ? update.reportProgress : this.reportProgress; // Headers and params may be appended to if `setHeaders` or\n    // `setParams` are used.\n\n    let headers = update.headers || this.headers;\n    let params = update.params || this.params; // Pass on context if needed\n\n    const context = (_a = update.context) !== null && _a !== void 0 ? _a : this.context; // Check whether the caller has asked to add headers.\n\n    if (update.setHeaders !== undefined) {\n      // Set every requested header.\n      headers = Object.keys(update.setHeaders).reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\n    } // Check whether the caller has asked to set params.\n\n\n    if (update.setParams) {\n      // Set every requested param.\n      params = Object.keys(update.setParams).reduce((params, param) => params.set(param, update.setParams[param]), params);\n    } // Finally, construct the new HttpRequest using the pieces from above.\n\n\n    return new HttpRequest(method, url, body, {\n      params,\n      headers,\n      context,\n      reportProgress,\n      responseType,\n      withCredentials\n    });\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\n\n\nvar HttpEventType = /*#__PURE__*/(() => {\n  HttpEventType = HttpEventType || {};\n\n  /**\n   * The request was sent out over the wire.\n   */\n  HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n  /**\n   * An upload progress event was received.\n   */\n\n  HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n  /**\n   * The response status code and headers were received.\n   */\n\n  HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n  /**\n   * A download progress event was received.\n   */\n\n  HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n  /**\n   * The full response including the body was received.\n   */\n\n  HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n  /**\n   * A custom event from an interceptor or a backend.\n   */\n\n  HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n  return HttpEventType;\n})();\n\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nclass HttpResponseBase {\n  /**\n   * Super-constructor for all responses.\n   *\n   * The single parameter accepted is an initialization hash. Any properties\n   * of the response passed there will override the default values.\n   */\n  constructor(init, defaultStatus = 200\n  /* Ok */\n  , defaultStatusText = 'OK') {\n    // If the hash has values passed, use them to initialize the response.\n    // Otherwise use the default values.\n    this.headers = init.headers || new HttpHeaders();\n    this.status = init.status !== undefined ? init.status : defaultStatus;\n    this.statusText = init.statusText || defaultStatusText;\n    this.url = init.url || null; // Cache the ok value to avoid defining a getter.\n\n    this.ok = this.status >= 200 && this.status < 300;\n  }\n\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\n\n\nclass HttpHeaderResponse extends HttpResponseBase {\n  /**\n   * Create a new `HttpHeaderResponse` with the given parameters.\n   */\n  constructor(init = {}) {\n    super(init);\n    this.type = HttpEventType.ResponseHeader;\n  }\n  /**\n   * Copy this `HttpHeaderResponse`, overriding its contents with the\n   * given parameter hash.\n   */\n\n\n  clone(update = {}) {\n    // Perform a straightforward initialization of the new HttpHeaderResponse,\n    // overriding the current parameters with new ones if given.\n    return new HttpHeaderResponse({\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined\n    });\n  }\n\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\n\n\nclass HttpResponse extends HttpResponseBase {\n  /**\n   * Construct a new `HttpResponse`.\n   */\n  constructor(init = {}) {\n    super(init);\n    this.type = HttpEventType.Response;\n    this.body = init.body !== undefined ? init.body : null;\n  }\n\n  clone(update = {}) {\n    return new HttpResponse({\n      body: update.body !== undefined ? update.body : this.body,\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined\n    });\n  }\n\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\n\n\nclass HttpErrorResponse extends HttpResponseBase {\n  constructor(init) {\n    // Initialize with a default status of 0 / Unknown Error.\n    super(init, 0, 'Unknown Error');\n    this.name = 'HttpErrorResponse';\n    /**\n     * Errors are never okay, even when the status code is in the 2xx success range.\n     */\n\n    this.ok = false; // If the response was successful, then this was a parse error. Otherwise, it was\n    // a protocol-level failure of some sort. Either the request failed in transit\n    // or the server returned an unsuccessful status code.\n\n    if (this.status >= 200 && this.status < 300) {\n      this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n    } else {\n      this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n    }\n\n    this.error = init.error || null;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\n\n\nfunction addBody(options, body) {\n  return {\n    body,\n    headers: options.headers,\n    context: options.context,\n    observe: options.observe,\n    params: options.params,\n    reportProgress: options.reportProgress,\n    responseType: options.responseType,\n    withCredentials: options.withCredentials\n  };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\n\n\nlet HttpClient = /*#__PURE__*/(() => {\n  class HttpClient {\n    constructor(handler) {\n      this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     */\n\n\n    request(first, url, options = {}) {\n      let req; // First, check whether the primary argument is an instance of `HttpRequest`.\n\n      if (first instanceof HttpRequest) {\n        // It is. The other arguments must be undefined (per the signatures) and can be\n        // ignored.\n        req = first;\n      } else {\n        // It's a string, so it represents a URL. Construct a request based on it,\n        // and incorporate the remaining arguments (assuming `GET` unless a method is\n        // provided.\n        // Figure out the headers.\n        let headers = undefined;\n\n        if (options.headers instanceof HttpHeaders) {\n          headers = options.headers;\n        } else {\n          headers = new HttpHeaders(options.headers);\n        } // Sort out parameters.\n\n\n        let params = undefined;\n\n        if (!!options.params) {\n          if (options.params instanceof HttpParams) {\n            params = options.params;\n          } else {\n            params = new HttpParams({\n              fromObject: options.params\n            });\n          }\n        } // Construct the request.\n\n\n        req = new HttpRequest(first, url, options.body !== undefined ? options.body : null, {\n          headers,\n          context: options.context,\n          params,\n          reportProgress: options.reportProgress,\n          // By default, JSON is assumed to be returned for all calls.\n          responseType: options.responseType || 'json',\n          withCredentials: options.withCredentials\n        });\n      } // Start with an Observable.of() the initial request, and run the handler (which\n      // includes all interceptors) inside a concatMap(). This way, the handler runs\n      // inside an Observable chain, which causes interceptors to be re-run on every\n      // subscription (this also makes retries re-run the handler, including interceptors).\n\n\n      const events$ = of(req).pipe(concatMap(req => this.handler.handle(req))); // If coming via the API signature which accepts a previously constructed HttpRequest,\n      // the only option is to get the event stream. Otherwise, return the event stream if\n      // that is what was requested.\n\n      if (first instanceof HttpRequest || options.observe === 'events') {\n        return events$;\n      } // The requested stream contains either the full response or the body. In either\n      // case, the first step is to filter the event stream to extract a stream of\n      // responses(s).\n\n\n      const res$ = events$.pipe(filter(event => event instanceof HttpResponse)); // Decide which stream to return.\n\n      switch (options.observe || 'body') {\n        case 'body':\n          // The requested stream is the body. Map the response stream to the response\n          // body. This could be done more simply, but a misbehaving interceptor might\n          // transform the response body into a different format and ignore the requested\n          // responseType. Guard against this by validating that the response is of the\n          // requested type.\n          switch (req.responseType) {\n            case 'arraybuffer':\n              return res$.pipe(map(res => {\n                // Validate that the body is an ArrayBuffer.\n                if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                  throw new Error('Response is not an ArrayBuffer.');\n                }\n\n                return res.body;\n              }));\n\n            case 'blob':\n              return res$.pipe(map(res => {\n                // Validate that the body is a Blob.\n                if (res.body !== null && !(res.body instanceof Blob)) {\n                  throw new Error('Response is not a Blob.');\n                }\n\n                return res.body;\n              }));\n\n            case 'text':\n              return res$.pipe(map(res => {\n                // Validate that the body is a string.\n                if (res.body !== null && typeof res.body !== 'string') {\n                  throw new Error('Response is not a string.');\n                }\n\n                return res.body;\n              }));\n\n            case 'json':\n            default:\n              // No validation needed for JSON responses, as they can be of any type.\n              return res$.pipe(map(res => res.body));\n          }\n\n        case 'response':\n          // The response stream was requested directly, so return it.\n          return res$;\n\n        default:\n          // Guard against new future observe types being added.\n          throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n      }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     */\n\n\n    delete(url, options = {}) {\n      return this.request('DELETE', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n\n\n    get(url, options = {}) {\n      return this.request('GET', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     */\n\n\n    head(url, options = {}) {\n      return this.request('HEAD', url, options);\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @param url The resource URL.\n     * @param callbackParam The callback function name.\n     *\n     */\n\n\n    jsonp(url, callbackParam) {\n      return this.request('JSONP', url, {\n        params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n        observe: 'body',\n        responseType: 'json'\n      });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilites of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     */\n\n\n    options(url, options = {}) {\n      return this.request('OPTIONS', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n\n\n    patch(url, body, options = {}) {\n      return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     */\n\n\n    post(url, body, options = {}) {\n      return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     */\n\n\n    put(url, body, options = {}) {\n      return this.request('PUT', url, addBody(options, body));\n    }\n\n  }\n\n  HttpClient.ɵfac = function HttpClient_Factory(t) {\n    return new (t || HttpClient)(ɵngcc0.ɵɵinject(HttpHandler));\n  };\n\n  HttpClient.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: HttpClient,\n    factory: HttpClient.ɵfac\n  });\n  return HttpClient;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\n\n\nclass HttpInterceptorHandler {\n  constructor(next, interceptor) {\n    this.next = next;\n    this.interceptor = interceptor;\n  }\n\n  handle(req) {\n    return this.interceptor.intercept(req, this.next);\n  }\n\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\n\n\nconst HTTP_INTERCEPTORS = /*#__PURE__*/new InjectionToken('HTTP_INTERCEPTORS');\nlet NoopInterceptor = /*#__PURE__*/(() => {\n  class NoopInterceptor {\n    intercept(req, next) {\n      return next.handle(req);\n    }\n\n  }\n\n  NoopInterceptor.ɵfac = function NoopInterceptor_Factory(t) {\n    return new (t || NoopInterceptor)();\n  };\n\n  NoopInterceptor.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: NoopInterceptor,\n    factory: NoopInterceptor.ɵfac\n  });\n  return NoopInterceptor;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\n\n\nlet nextRequestId = 0; // Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\n\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.'; // Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\n\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\n\nclass JsonpCallbackContext {}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * @publicApi\n */\n\n\nlet JsonpClientBackend = /*#__PURE__*/(() => {\n  class JsonpClientBackend {\n    constructor(callbackMap, document) {\n      this.callbackMap = callbackMap;\n      this.document = document;\n      /**\n       * A resolved promise that can be used to schedule microtasks in the event handlers.\n       */\n\n      this.resolvedPromise = Promise.resolve();\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     */\n\n\n    nextCallback() {\n      return `ng_jsonp_callback_${nextRequestId++}`;\n    }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     *\n     */\n\n\n    handle(req) {\n      // Firstly, check both the method and response type. If either doesn't match\n      // then the request was improperly routed here and cannot be handled.\n      if (req.method !== 'JSONP') {\n        throw new Error(JSONP_ERR_WRONG_METHOD);\n      } else if (req.responseType !== 'json') {\n        throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n      } // Everything else happens inside the Observable boundary.\n\n\n      return new Observable(observer => {\n        // The first step to make a request is to generate the callback name, and replace the\n        // callback placeholder in the URL with the name. Care has to be taken here to ensure\n        // a trailing &, if matched, gets inserted back into the URL in the correct place.\n        const callback = this.nextCallback();\n        const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`); // Construct the <script> tag and point it at the URL.\n\n        const node = this.document.createElement('script');\n        node.src = url; // A JSONP request requires waiting for multiple callbacks. These variables\n        // are closed over and track state across those callbacks.\n        // The response object, if one has been received, or null otherwise.\n\n        let body = null; // Whether the response callback has been called.\n\n        let finished = false; // Whether the request has been cancelled (and thus any other callbacks)\n        // should be ignored.\n\n        let cancelled = false; // Set the response callback in this.callbackMap (which will be the window\n        // object in the browser. The script being loaded via the <script> tag will\n        // eventually call this callback.\n\n        this.callbackMap[callback] = data => {\n          // Data has been received from the JSONP script. Firstly, delete this callback.\n          delete this.callbackMap[callback]; // Next, make sure the request wasn't cancelled in the meantime.\n\n          if (cancelled) {\n            return;\n          } // Set state to indicate data was received.\n\n\n          body = data;\n          finished = true;\n        }; // cleanup() is a utility closure that removes the <script> from the page and\n        // the response callback from the window. This logic is used in both the\n        // success, error, and cancellation paths, so it's extracted out for convenience.\n\n\n        const cleanup = () => {\n          // Remove the <script> tag if it's still on the page.\n          if (node.parentNode) {\n            node.parentNode.removeChild(node);\n          } // Remove the response callback from the callbackMap (window object in the\n          // browser).\n\n\n          delete this.callbackMap[callback];\n        }; // onLoad() is the success callback which runs after the response callback\n        // if the JSONP script loads successfully. The event itself is unimportant.\n        // If something went wrong, onLoad() may run without the response callback\n        // having been invoked.\n\n\n        const onLoad = event => {\n          // Do nothing if the request has been cancelled.\n          if (cancelled) {\n            return;\n          } // We wrap it in an extra Promise, to ensure the microtask\n          // is scheduled after the loaded endpoint has executed any potential microtask itself,\n          // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n\n\n          this.resolvedPromise.then(() => {\n            // Cleanup the page.\n            cleanup(); // Check whether the response callback has run.\n\n            if (!finished) {\n              // It hasn't, something went wrong with the request. Return an error via\n              // the Observable error path. All JSONP errors have status 0.\n              observer.error(new HttpErrorResponse({\n                url,\n                status: 0,\n                statusText: 'JSONP Error',\n                error: new Error(JSONP_ERR_NO_CALLBACK)\n              }));\n              return;\n            } // Success. body either contains the response body or null if none was\n            // returned.\n\n\n            observer.next(new HttpResponse({\n              body,\n              status: 200\n              /* Ok */\n              ,\n              statusText: 'OK',\n              url\n            })); // Complete the stream, the response is over.\n\n            observer.complete();\n          });\n        }; // onError() is the error callback, which runs if the script returned generates\n        // a Javascript error. It emits the error via the Observable error channel as\n        // a HttpErrorResponse.\n\n\n        const onError = error => {\n          // If the request was already cancelled, no need to emit anything.\n          if (cancelled) {\n            return;\n          }\n\n          cleanup(); // Wrap the error in a HttpErrorResponse.\n\n          observer.error(new HttpErrorResponse({\n            error,\n            status: 0,\n            statusText: 'JSONP Error',\n            url\n          }));\n        }; // Subscribe to both the success (load) and error events on the <script> tag,\n        // and add it to the page.\n\n\n        node.addEventListener('load', onLoad);\n        node.addEventListener('error', onError);\n        this.document.body.appendChild(node); // The request has now been successfully sent.\n\n        observer.next({\n          type: HttpEventType.Sent\n        }); // Cancellation handler.\n\n        return () => {\n          // Track the cancellation so event listeners won't do anything even if already scheduled.\n          cancelled = true; // Remove the event listeners so they won't run if the events later fire.\n\n          node.removeEventListener('load', onLoad);\n          node.removeEventListener('error', onError); // And finally, clean up the page.\n\n          cleanup();\n        };\n      });\n    }\n\n  }\n\n  JsonpClientBackend.ɵfac = function JsonpClientBackend_Factory(t) {\n    return new (t || JsonpClientBackend)(ɵngcc0.ɵɵinject(JsonpCallbackContext), ɵngcc0.ɵɵinject(DOCUMENT));\n  };\n\n  JsonpClientBackend.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: JsonpClientBackend,\n    factory: JsonpClientBackend.ɵfac\n  });\n  return JsonpClientBackend;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * @publicApi\n */\n\n\nlet JsonpInterceptor = /*#__PURE__*/(() => {\n  class JsonpInterceptor {\n    constructor(jsonp) {\n      this.jsonp = jsonp;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param req The outgoing request object to handle.\n     * @param next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @returns An observable of the event stream.\n     */\n\n\n    intercept(req, next) {\n      if (req.method === 'JSONP') {\n        return this.jsonp.handle(req);\n      } // Fall through for normal HTTP requests.\n\n\n      return next.handle(req);\n    }\n\n  }\n\n  JsonpInterceptor.ɵfac = function JsonpInterceptor_Factory(t) {\n    return new (t || JsonpInterceptor)(ɵngcc0.ɵɵinject(JsonpClientBackend));\n  };\n\n  JsonpInterceptor.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: JsonpInterceptor,\n    factory: JsonpInterceptor.ɵfac\n  });\n  return JsonpInterceptor;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\n\nfunction getResponseUrl(xhr) {\n  if ('responseURL' in xhr && xhr.responseURL) {\n    return xhr.responseURL;\n  }\n\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n\n  return null;\n}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * @publicApi\n */\n\n\nlet HttpXhrBackend = /*#__PURE__*/(() => {\n  class HttpXhrBackend {\n    constructor(xhrFactory) {\n      this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     */\n\n\n    handle(req) {\n      // Quick check to give a better error message when a user attempts to use\n      // HttpClient.jsonp() without installing the HttpClientJsonpModule\n      if (req.method === 'JSONP') {\n        throw new Error(`Attempted to construct Jsonp request without HttpClientJsonpModule installed.`);\n      } // Everything happens on Observable subscription.\n\n\n      return new Observable(observer => {\n        // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n        const xhr = this.xhrFactory.build();\n        xhr.open(req.method, req.urlWithParams);\n\n        if (!!req.withCredentials) {\n          xhr.withCredentials = true;\n        } // Add all the requested headers.\n\n\n        req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(','))); // Add an Accept header if one isn't present already.\n\n        if (!req.headers.has('Accept')) {\n          xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n        } // Auto-detect the Content-Type header if one isn't present already.\n\n\n        if (!req.headers.has('Content-Type')) {\n          const detectedType = req.detectContentTypeHeader(); // Sometimes Content-Type detection fails.\n\n          if (detectedType !== null) {\n            xhr.setRequestHeader('Content-Type', detectedType);\n          }\n        } // Set the responseType if one was requested.\n\n\n        if (req.responseType) {\n          const responseType = req.responseType.toLowerCase(); // JSON responses need to be processed as text. This is because if the server\n          // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n          // xhr.response will be null, and xhr.responseText cannot be accessed to\n          // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n          // is parsed by first requesting text and then applying JSON.parse.\n\n          xhr.responseType = responseType !== 'json' ? responseType : 'text';\n        } // Serialize the request body if one is present. If not, this will be set to null.\n\n\n        const reqBody = req.serializeBody(); // If progress events are enabled, response headers will be delivered\n        // in two events - the HttpHeaderResponse event and the full HttpResponse\n        // event. However, since response headers don't change in between these\n        // two events, it doesn't make sense to parse them twice. So headerResponse\n        // caches the data extracted from the response whenever it's first parsed,\n        // to ensure parsing isn't duplicated.\n\n        let headerResponse = null; // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n        // state, and memoizes it into headerResponse.\n\n        const partialFromXhr = () => {\n          if (headerResponse !== null) {\n            return headerResponse;\n          } // Read status and normalize an IE9 bug (https://bugs.jquery.com/ticket/1450).\n\n\n          const status = xhr.status === 1223 ? 204\n          /* NoContent */\n          : xhr.status;\n          const statusText = xhr.statusText || 'OK'; // Parse headers from XMLHttpRequest - this step is lazy.\n\n          const headers = new HttpHeaders(xhr.getAllResponseHeaders()); // Read the response URL from the XMLHttpResponse instance and fall back on the\n          // request URL.\n\n          const url = getResponseUrl(xhr) || req.url; // Construct the HttpHeaderResponse and memoize it.\n\n          headerResponse = new HttpHeaderResponse({\n            headers,\n            status,\n            statusText,\n            url\n          });\n          return headerResponse;\n        }; // Next, a few closures are defined for the various events which XMLHttpRequest can\n        // emit. This allows them to be unregistered as event listeners later.\n        // First up is the load event, which represents a response being fully available.\n\n\n        const onLoad = () => {\n          // Read response state from the memoized partial data.\n          let {\n            headers,\n            status,\n            statusText,\n            url\n          } = partialFromXhr(); // The body will be read out if present.\n\n          let body = null;\n\n          if (status !== 204\n          /* NoContent */\n          ) {\n            // Use XMLHttpRequest.response if set, responseText otherwise.\n            body = typeof xhr.response === 'undefined' ? xhr.responseText : xhr.response;\n          } // Normalize another potential bug (this one comes from CORS).\n\n\n          if (status === 0) {\n            status = !!body ? 200\n            /* Ok */\n            : 0;\n          } // ok determines whether the response will be transmitted on the event or\n          // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n          // but a successful status code can still result in an error if the user\n          // asked for JSON data and the body cannot be parsed as such.\n\n\n          let ok = status >= 200 && status < 300; // Check whether the body needs to be parsed as JSON (in many cases the browser\n          // will have done that already).\n\n          if (req.responseType === 'json' && typeof body === 'string') {\n            // Save the original body, before attempting XSSI prefix stripping.\n            const originalBody = body;\n            body = body.replace(XSSI_PREFIX, '');\n\n            try {\n              // Attempt the parse. If it fails, a parse error should be delivered to the user.\n              body = body !== '' ? JSON.parse(body) : null;\n            } catch (error) {\n              // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n              // JSON response. Restore the original body (including any XSSI prefix) to deliver\n              // a better error response.\n              body = originalBody; // If this was an error request to begin with, leave it as a string, it probably\n              // just isn't JSON. Otherwise, deliver the parsing error to the user.\n\n              if (ok) {\n                // Even though the response status was 2xx, this is still an error.\n                ok = false; // The parse error contains the text of the body that failed to parse.\n\n                body = {\n                  error,\n                  text: body\n                };\n              }\n            }\n          }\n\n          if (ok) {\n            // A successful response is delivered on the event stream.\n            observer.next(new HttpResponse({\n              body,\n              headers,\n              status,\n              statusText,\n              url: url || undefined\n            })); // The full body has been received and delivered, no further events\n            // are possible. This request is complete.\n\n            observer.complete();\n          } else {\n            // An unsuccessful request is delivered on the error channel.\n            observer.error(new HttpErrorResponse({\n              // The error in this case is the response body (error from the server).\n              error: body,\n              headers,\n              status,\n              statusText,\n              url: url || undefined\n            }));\n          }\n        }; // The onError callback is called when something goes wrong at the network level.\n        // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n        // transmitted on the error channel.\n\n\n        const onError = error => {\n          const {\n            url\n          } = partialFromXhr();\n          const res = new HttpErrorResponse({\n            error,\n            status: xhr.status || 0,\n            statusText: xhr.statusText || 'Unknown Error',\n            url: url || undefined\n          });\n          observer.error(res);\n        }; // The sentHeaders flag tracks whether the HttpResponseHeaders event\n        // has been sent on the stream. This is necessary to track if progress\n        // is enabled since the event will be sent on only the first download\n        // progerss event.\n\n\n        let sentHeaders = false; // The download progress event handler, which is only registered if\n        // progress events are enabled.\n\n        const onDownProgress = event => {\n          // Send the HttpResponseHeaders event if it hasn't been sent already.\n          if (!sentHeaders) {\n            observer.next(partialFromXhr());\n            sentHeaders = true;\n          } // Start building the download progress event to deliver on the response\n          // event stream.\n\n\n          let progressEvent = {\n            type: HttpEventType.DownloadProgress,\n            loaded: event.loaded\n          }; // Set the total number of bytes in the event if it's available.\n\n          if (event.lengthComputable) {\n            progressEvent.total = event.total;\n          } // If the request was for text content and a partial response is\n          // available on XMLHttpRequest, include it in the progress event\n          // to allow for streaming reads.\n\n\n          if (req.responseType === 'text' && !!xhr.responseText) {\n            progressEvent.partialText = xhr.responseText;\n          } // Finally, fire the event.\n\n\n          observer.next(progressEvent);\n        }; // The upload progress event handler, which is only registered if\n        // progress events are enabled.\n\n\n        const onUpProgress = event => {\n          // Upload progress events are simpler. Begin building the progress\n          // event.\n          let progress = {\n            type: HttpEventType.UploadProgress,\n            loaded: event.loaded\n          }; // If the total number of bytes being uploaded is available, include\n          // it.\n\n          if (event.lengthComputable) {\n            progress.total = event.total;\n          } // Send the event.\n\n\n          observer.next(progress);\n        }; // By default, register for load and error events.\n\n\n        xhr.addEventListener('load', onLoad);\n        xhr.addEventListener('error', onError);\n        xhr.addEventListener('timeout', onError);\n        xhr.addEventListener('abort', onError); // Progress events are only enabled if requested.\n\n        if (req.reportProgress) {\n          // Download progress is always enabled if requested.\n          xhr.addEventListener('progress', onDownProgress); // Upload progress depends on whether there is a body to upload.\n\n          if (reqBody !== null && xhr.upload) {\n            xhr.upload.addEventListener('progress', onUpProgress);\n          }\n        } // Fire the request, and notify the event stream that it was fired.\n\n\n        xhr.send(reqBody);\n        observer.next({\n          type: HttpEventType.Sent\n        }); // This is the return from the Observable function, which is the\n        // request cancellation handler.\n\n        return () => {\n          // On a cancellation, remove all registered event listeners.\n          xhr.removeEventListener('error', onError);\n          xhr.removeEventListener('abort', onError);\n          xhr.removeEventListener('load', onLoad);\n          xhr.removeEventListener('timeout', onError);\n\n          if (req.reportProgress) {\n            xhr.removeEventListener('progress', onDownProgress);\n\n            if (reqBody !== null && xhr.upload) {\n              xhr.upload.removeEventListener('progress', onUpProgress);\n            }\n          } // Finally, abort the in-flight request.\n\n\n          if (xhr.readyState !== xhr.DONE) {\n            xhr.abort();\n          }\n        };\n      });\n    }\n\n  }\n\n  HttpXhrBackend.ɵfac = function HttpXhrBackend_Factory(t) {\n    return new (t || HttpXhrBackend)(ɵngcc0.ɵɵinject(ɵngcc1.XhrFactory));\n  };\n\n  HttpXhrBackend.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: HttpXhrBackend,\n    factory: HttpXhrBackend.ɵfac\n  });\n  return HttpXhrBackend;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst XSRF_COOKIE_NAME = /*#__PURE__*/new InjectionToken('XSRF_COOKIE_NAME');\nconst XSRF_HEADER_NAME = /*#__PURE__*/new InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\n\nclass HttpXsrfTokenExtractor {}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\n\n\nlet HttpXsrfCookieExtractor = /*#__PURE__*/(() => {\n  class HttpXsrfCookieExtractor {\n    constructor(doc, platform, cookieName) {\n      this.doc = doc;\n      this.platform = platform;\n      this.cookieName = cookieName;\n      this.lastCookieString = '';\n      this.lastToken = null;\n      /**\n       * @internal for testing\n       */\n\n      this.parseCount = 0;\n    }\n\n    getToken() {\n      if (this.platform === 'server') {\n        return null;\n      }\n\n      const cookieString = this.doc.cookie || '';\n\n      if (cookieString !== this.lastCookieString) {\n        this.parseCount++;\n        this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n        this.lastCookieString = cookieString;\n      }\n\n      return this.lastToken;\n    }\n\n  }\n\n  HttpXsrfCookieExtractor.ɵfac = function HttpXsrfCookieExtractor_Factory(t) {\n    return new (t || HttpXsrfCookieExtractor)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(XSRF_COOKIE_NAME));\n  };\n\n  HttpXsrfCookieExtractor.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: HttpXsrfCookieExtractor,\n    factory: HttpXsrfCookieExtractor.ɵfac\n  });\n  return HttpXsrfCookieExtractor;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\n\n\nlet HttpXsrfInterceptor = /*#__PURE__*/(() => {\n  class HttpXsrfInterceptor {\n    constructor(tokenService, headerName) {\n      this.tokenService = tokenService;\n      this.headerName = headerName;\n    }\n\n    intercept(req, next) {\n      const lcUrl = req.url.toLowerCase(); // Skip both non-mutating requests and absolute URLs.\n      // Non-mutating requests don't require a token, and absolute URLs require special handling\n      // anyway as the cookie set\n      // on our origin is not the same as the token expected by another origin.\n\n      if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') || lcUrl.startsWith('https://')) {\n        return next.handle(req);\n      }\n\n      const token = this.tokenService.getToken(); // Be careful not to overwrite an existing header of the same name.\n\n      if (token !== null && !req.headers.has(this.headerName)) {\n        req = req.clone({\n          headers: req.headers.set(this.headerName, token)\n        });\n      }\n\n      return next.handle(req);\n    }\n\n  }\n\n  HttpXsrfInterceptor.ɵfac = function HttpXsrfInterceptor_Factory(t) {\n    return new (t || HttpXsrfInterceptor)(ɵngcc0.ɵɵinject(HttpXsrfTokenExtractor), ɵngcc0.ɵɵinject(XSRF_HEADER_NAME));\n  };\n\n  HttpXsrfInterceptor.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: HttpXsrfInterceptor,\n    factory: HttpXsrfInterceptor.ɵfac\n  });\n  return HttpXsrfInterceptor;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\n\n\nlet HttpInterceptingHandler = /*#__PURE__*/(() => {\n  class HttpInterceptingHandler {\n    constructor(backend, injector) {\n      this.backend = backend;\n      this.injector = injector;\n      this.chain = null;\n    }\n\n    handle(req) {\n      if (this.chain === null) {\n        const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n        this.chain = interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), this.backend);\n      }\n\n      return this.chain.handle(req);\n    }\n\n  }\n\n  HttpInterceptingHandler.ɵfac = function HttpInterceptingHandler_Factory(t) {\n    return new (t || HttpInterceptingHandler)(ɵngcc0.ɵɵinject(HttpBackend), ɵngcc0.ɵɵinject(ɵngcc0.Injector));\n  };\n\n  HttpInterceptingHandler.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: HttpInterceptingHandler,\n    factory: HttpInterceptingHandler.ɵfac\n  });\n  return HttpInterceptingHandler;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n */\n\n\nfunction interceptingHandler(backend, interceptors = []) {\n  if (!interceptors) {\n    return backend;\n  }\n\n  return interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\n\n\nfunction jsonpCallbackContext() {\n  if (typeof window === 'object') {\n    return window;\n  }\n\n  return {};\n}\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\n\n\nlet HttpClientXsrfModule = /*#__PURE__*/(() => {\n  class HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     */\n    static disable() {\n      return {\n        ngModule: HttpClientXsrfModule,\n        providers: [{\n          provide: HttpXsrfInterceptor,\n          useClass: NoopInterceptor\n        }]\n      };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     */\n\n\n    static withOptions(options = {}) {\n      return {\n        ngModule: HttpClientXsrfModule,\n        providers: [options.cookieName ? {\n          provide: XSRF_COOKIE_NAME,\n          useValue: options.cookieName\n        } : [], options.headerName ? {\n          provide: XSRF_HEADER_NAME,\n          useValue: options.headerName\n        } : []]\n      };\n    }\n\n  }\n\n  HttpClientXsrfModule.ɵfac = function HttpClientXsrfModule_Factory(t) {\n    return new (t || HttpClientXsrfModule)();\n  };\n\n  HttpClientXsrfModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: HttpClientXsrfModule\n  });\n  HttpClientXsrfModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [HttpXsrfInterceptor, {\n      provide: HTTP_INTERCEPTORS,\n      useExisting: HttpXsrfInterceptor,\n      multi: true\n    }, {\n      provide: HttpXsrfTokenExtractor,\n      useClass: HttpXsrfCookieExtractor\n    }, {\n      provide: XSRF_COOKIE_NAME,\n      useValue: 'XSRF-TOKEN'\n    }, {\n      provide: XSRF_HEADER_NAME,\n      useValue: 'X-XSRF-TOKEN'\n    }]\n  });\n  return HttpClientXsrfModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\n\n\nlet HttpClientModule = /*#__PURE__*/(() => {\n  class HttpClientModule {}\n\n  HttpClientModule.ɵfac = function HttpClientModule_Factory(t) {\n    return new (t || HttpClientModule)();\n  };\n\n  HttpClientModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: HttpClientModule\n  });\n  HttpClientModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [HttpClient, {\n      provide: HttpHandler,\n      useClass: HttpInterceptingHandler\n    }, HttpXhrBackend, {\n      provide: HttpBackend,\n      useExisting: HttpXhrBackend\n    }],\n    imports: [[HttpClientXsrfModule.withOptions({\n      cookieName: 'XSRF-TOKEN',\n      headerName: 'X-XSRF-TOKEN'\n    })]]\n  });\n  return HttpClientModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HttpClientModule, {\n    imports: [HttpClientXsrfModule]\n  });\n})();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\n\n\nlet HttpClientJsonpModule = /*#__PURE__*/(() => {\n  class HttpClientJsonpModule {}\n\n  HttpClientJsonpModule.ɵfac = function HttpClientJsonpModule_Factory(t) {\n    return new (t || HttpClientJsonpModule)();\n  };\n\n  HttpClientJsonpModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: HttpClientJsonpModule\n  });\n  HttpClientJsonpModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [JsonpClientBackend, {\n      provide: JsonpCallbackContext,\n      useFactory: jsonpCallbackContext\n    }, {\n      provide: HTTP_INTERCEPTORS,\n      useClass: JsonpInterceptor,\n      multi: true\n    }]\n  });\n  return HttpClientJsonpModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n * @see `XhrFactory`\n * @deprecated\n * `XhrFactory` has moved, please import `XhrFactory` from `@angular/common` instead.\n */\n\n\nconst XhrFactory = XhrFactory$1;\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpErrorResponse, HttpEventType, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, HttpInterceptingHandler as ɵHttpInterceptingHandler, NoopInterceptor as ɵangular_packages_common_http_http_a, JsonpCallbackContext as ɵangular_packages_common_http_http_b, jsonpCallbackContext as ɵangular_packages_common_http_http_c, XSRF_COOKIE_NAME as ɵangular_packages_common_http_http_d, XSRF_HEADER_NAME as ɵangular_packages_common_http_http_e, HttpXsrfCookieExtractor as ɵangular_packages_common_http_http_f, HttpXsrfInterceptor as ɵangular_packages_common_http_http_g }; //# sourceMappingURL=http.js.map","map":{"version":3,"sources":["/home/arvind/Desktop/Ionic/HRMS_PLUS/node_modules/@angular/common/__ivy_ngcc__/fesm2015/http.js"],"names":["DOCUMENT","XhrFactory","XhrFactory$1","ɵparseCookieValue","Injectable","InjectionToken","Inject","PLATFORM_ID","Injector","NgModule","of","Observable","concatMap","filter","map","ɵngcc0","ɵngcc1","HttpHandler","HttpBackend","HttpHeaders","constructor","headers","normalizedNames","Map","lazyUpdate","lazyInit","split","forEach","line","index","indexOf","name","slice","key","toLowerCase","value","trim","maybeSetNormalizedName","has","get","push","set","Object","keys","values","length","init","Array","from","getAll","append","clone","op","delete","lcName","copyFrom","update","applyUpdate","other","concat","base","undefined","toDelete","existing","fn","HttpUrlEncodingCodec","encodeKey","standardEncoding","encodeValue","decodeKey","decodeURIComponent","decodeValue","paramParser","rawParams","codec","params","replace","param","eqIdx","val","list","v","encodeURIComponent","valueToString","HttpParams","options","updates","cloneFrom","encoder","fromString","fromObject","Error","isArray","res","appendAll","_value","toString","eKey","join","idx","splice","HttpContextToken","defaultValue","HttpContext","token","mightHaveBody","method","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","isUrlSearchParams","URLSearchParams","HttpRequest","url","third","fourth","body","reportProgress","withCredentials","responseType","toUpperCase","context","urlWithParams","qIdx","sep","serializeBody","JSON","stringify","detectContentTypeHeader","type","_a","setHeaders","reduce","setParams","HttpEventType","HttpResponseBase","defaultStatus","defaultStatusText","status","statusText","ok","HttpHeaderResponse","ResponseHeader","HttpResponse","Response","HttpErrorResponse","message","error","addBody","observe","HttpClient","handler","request","first","req","events$","pipe","handle","res$","event","head","jsonp","callbackParam","patch","post","put","ɵfac","HttpClient_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","factory","ngDevMode","HttpInterceptorHandler","next","interceptor","intercept","HTTP_INTERCEPTORS","NoopInterceptor","NoopInterceptor_Factory","nextRequestId","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONP_ERR_WRONG_RESPONSE_TYPE","JsonpCallbackContext","JsonpClientBackend","callbackMap","document","resolvedPromise","Promise","resolve","nextCallback","observer","callback","node","createElement","src","finished","cancelled","data","cleanup","parentNode","removeChild","onLoad","then","complete","onError","addEventListener","appendChild","Sent","removeEventListener","JsonpClientBackend_Factory","JsonpInterceptor","JsonpInterceptor_Factory","XSSI_PREFIX","getResponseUrl","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","HttpXhrBackend","xhrFactory","build","open","setRequestHeader","detectedType","reqBody","headerResponse","partialFromXhr","response","responseText","originalBody","parse","text","sentHeaders","onDownProgress","progressEvent","DownloadProgress","loaded","lengthComputable","total","partialText","onUpProgress","progress","UploadProgress","upload","send","readyState","DONE","abort","HttpXhrBackend_Factory","XSRF_COOKIE_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","getToken","cookieString","cookie","HttpXsrfCookieExtractor_Factory","HttpXsrfInterceptor","tokenService","headerName","lcUrl","startsWith","HttpXsrfInterceptor_Factory","HttpInterceptingHandler","backend","injector","chain","interceptors","reduceRight","HttpInterceptingHandler_Factory","interceptingHandler","jsonpCallbackContext","window","HttpClientXsrfModule","disable","ngModule","providers","provide","useClass","withOptions","useValue","HttpClientXsrfModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","useExisting","multi","HttpClientModule","HttpClientModule_Factory","imports","ngJitMode","ɵɵsetNgModuleScope","HttpClientJsonpModule","HttpClientJsonpModule_Factory","useFactory","ɵHttpInterceptingHandler","ɵangular_packages_common_http_http_a","ɵangular_packages_common_http_http_b","ɵangular_packages_common_http_http_c","ɵangular_packages_common_http_http_d","ɵangular_packages_common_http_http_e","ɵangular_packages_common_http_http_f","ɵangular_packages_common_http_http_g"],"mappings":"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AgB,EAA9E;AACH,KAFD,MAGK;AACD,WAAKiC,OAAL,GAAgB,6BAA4BvG,IAAI,CAACsE,GAAL,IAAY,eAAgB,KAAItE,IAAI,CAAC+F,MAAO,IAAG/F,IAAI,CAACgG,UAAW,EAA3G;AACH;;AACD,SAAKQ,KAAL,GAAaxG,IAAI,CAACwG,KAAL,IAAc,IAA3B;AACH;;AAnB4C;AAsBjD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,OAAT,CAAiBlE,OAAjB,EAA0BkC,IAA1B,EAAgC;AAC5B,SAAO;AACHA,IAAAA,IADG;AAEHlG,IAAAA,OAAO,EAAEgE,OAAO,CAAChE,OAFd;AAGHuG,IAAAA,OAAO,EAAEvC,OAAO,CAACuC,OAHd;AAIH4B,IAAAA,OAAO,EAAEnE,OAAO,CAACmE,OAJd;AAKH7E,IAAAA,MAAM,EAAEU,OAAO,CAACV,MALb;AAMH6C,IAAAA,cAAc,EAAEnC,OAAO,CAACmC,cANrB;AAOHE,IAAAA,YAAY,EAAErC,OAAO,CAACqC,YAPnB;AAQHD,IAAAA,eAAe,EAAEpC,OAAO,CAACoC;AARtB,GAAP;AAUH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACMgC,U;AAAN,QAAMA,UAAN,CAAiB;AACbrI,IAAAA,WAAW,CAACsI,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,IAAAA,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","sourcesContent":["/**\n * @license Angular v12.1.5\n * (c) 2010-2021 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { DOCUMENT, XhrFactory as XhrFactory$1, ɵparseCookieValue } from '@angular/common';\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, Injector, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nclass HttpHandler {\n}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nclass HttpBackend {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nclass HttpHeaders {\n    /**  Constructs a new HTTP header object with the given values.*/\n    constructor(headers) {\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                headers.split('\\n').forEach(line => {\n                    const index = line.indexOf(':');\n                    if (index > 0) {\n                        const name = line.slice(0, index);\n                        const key = name.toLowerCase();\n                        const value = line.slice(index + 1).trim();\n                        this.maybeSetNormalizedName(name, key);\n                        if (this.headers.has(key)) {\n                            this.headers.get(key).push(value);\n                        }\n                        else {\n                            this.headers.set(key, [value]);\n                        }\n                    }\n                });\n            };\n        }\n        else {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                Object.keys(headers).forEach(name => {\n                    let values = headers[name];\n                    const key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        this.headers.set(key, values);\n                        this.maybeSetNormalizedName(name, key);\n                    }\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of a given header.\n     *\n     * @param name The header name to check for existence.\n     *\n     * @returns True if the header exists, false otherwise.\n     */\n    has(name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param name The header name.\n     *\n     * @returns The value string if the header exists, null otherwise\n     */\n    get(name) {\n        this.init();\n        const values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @returns A list of header names.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param name The header name from which to retrieve values.\n     *\n     * @returns A string of values if the header exists, null otherwise.\n     */\n    getAll(name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param name The header name for which to append the values.\n     * @param value The value to append.\n     *\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\n     */\n    append(name, value) {\n        return this.clone({ name, value, op: 'a' });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param name The header name.\n     * @param value The value or values to set or overide for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the newly set header value.\n     */\n    set(name, value) {\n        return this.clone({ name, value, op: 's' });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param name The header name.\n     * @param value The value or values to delete for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the given value deleted.\n     */\n    delete(name, value) {\n        return this.clone({ name, value, op: 'd' });\n    }\n    maybeSetNormalizedName(name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    }\n    init() {\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach(update => this.applyUpdate(update));\n                this.lazyUpdate = null;\n            }\n        }\n    }\n    copyFrom(other) {\n        other.init();\n        Array.from(other.headers.keys()).forEach(key => {\n            this.headers.set(key, other.headers.get(key));\n            this.normalizedNames.set(key, other.normalizedNames.get(key));\n        });\n    }\n    clone(update) {\n        const clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    }\n    applyUpdate(update) {\n        const key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                let value = update.value;\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push(...value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                const toDelete = update.value;\n                if (!toDelete) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    let existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter(value => toDelete.indexOf(value) === -1);\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    }\n    /**\n     * @internal\n     */\n    forEach(fn) {\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nclass HttpUrlEncodingCodec {\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param key The key name.\n     * @returns The encoded key name.\n     */\n    encodeKey(key) {\n        return standardEncoding(key);\n    }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param value The value.\n     * @returns The encoded value.\n     */\n    encodeValue(value) {\n        return standardEncoding(value);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param key The encoded key name.\n     * @returns The decoded key name.\n     */\n    decodeKey(key) {\n        return decodeURIComponent(key);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param value The encoded value.\n     * @returns The decoded value.\n     */\n    decodeValue(value) {\n        return decodeURIComponent(value);\n    }\n}\nfunction paramParser(rawParams, codec) {\n    const map = new Map();\n    if (rawParams.length > 0) {\n        // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n        // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n        // may start with the `?` char, so we strip it if it's present.\n        const params = rawParams.replace(/^\\?/, '').split('&');\n        params.forEach((param) => {\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\nfunction valueToString(value) {\n    return `${value}`;\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nclass HttpParams {\n    constructor(options = {}) {\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(`Cannot specify both fromString and fromObject.`);\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach(key => {\n                const value = options.fromObject[key];\n                this.map.set(key, Array.isArray(value) ? value : [value]);\n            });\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Reports whether the body includes one or more values for a given parameter.\n     * @param param The parameter name.\n     * @returns True if the parameter has one or more values,\n     * false if it has no value or is not present.\n     */\n    has(param) {\n        this.init();\n        return this.map.has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param param The parameter name.\n     * @returns The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n    get(param) {\n        this.init();\n        const res = this.map.get(param);\n        return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param param The parameter name.\n     * @returns All values in a string array,\n     * or `null` if the parameter not present.\n     */\n    getAll(param) {\n        this.init();\n        return this.map.get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @returns The parameter names in a string array.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.map.keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param param The parameter name.\n     * @param value The new value to add.\n     * @return A new body with the appended value.\n     */\n    append(param, value) {\n        return this.clone({ param, value, op: 'a' });\n    }\n    /**\n     * Constructs a new body with appended values for the given parameter name.\n     * @param params parameters and values\n     * @return A new body with the new value.\n     */\n    appendAll(params) {\n        const updates = [];\n        Object.keys(params).forEach(param => {\n            const value = params[param];\n            if (Array.isArray(value)) {\n                value.forEach(_value => {\n                    updates.push({ param, value: _value, op: 'a' });\n                });\n            }\n            else {\n                updates.push({ param, value: value, op: 'a' });\n            }\n        });\n        return this.clone(updates);\n    }\n    /**\n     * Replaces the value for a parameter.\n     * @param param The parameter name.\n     * @param value The new value.\n     * @return A new body with the new value.\n     */\n    set(param, value) {\n        return this.clone({ param, value, op: 's' });\n    }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param param The parameter name.\n     * @param value The value to remove, if provided.\n     * @return A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n    delete(param, value) {\n        return this.clone({ param, value, op: 'd' });\n    }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    toString() {\n        this.init();\n        return this.keys()\n            .map(key => {\n            const eKey = this.encoder.encodeKey(key);\n            // `a: ['1']` produces `'a=1'`\n            // `b: []` produces `''`\n            // `c: ['1', '2']` produces `'c=1&c=2'`\n            return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value))\n                .join('&');\n        })\n            // filter out empty values because `b: []` produces `''`\n            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n            .filter(param => param !== '')\n            .join('&');\n    }\n    clone(update) {\n        const clone = new HttpParams({ encoder: this.encoder });\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat(update);\n        return clone;\n    }\n    init() {\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));\n            this.updates.forEach(update => {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\n                        base.push(valueToString(update.value));\n                        this.map.set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            let base = this.map.get(update.param) || [];\n                            const idx = base.indexOf(valueToString(update.value));\n                            if (idx !== -1) {\n                                base.splice(idx, 1);\n                            }\n                            if (base.length > 0) {\n                                this.map.set(update.param, base);\n                            }\n                            else {\n                                this.map.delete(update.param);\n                            }\n                        }\n                        else {\n                            this.map.delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = this.updates = null;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @publicApi\n */\nclass HttpContextToken {\n    constructor(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n}\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```typescript\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @publicApi\n */\nclass HttpContext {\n    constructor() {\n        this.map = new Map();\n    }\n    /**\n     * Store a value in the context. If a value is already present it will be overwritten.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     * @param value The value to store.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    set(token, value) {\n        this.map.set(token, value);\n        return this;\n    }\n    /**\n     * Retrieve the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns The stored value or default if one is defined.\n     */\n    get(token) {\n        if (!this.map.has(token)) {\n            this.map.set(token, token.defaultValue());\n        }\n        return this.map.get(token);\n    }\n    /**\n     * Delete the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    delete(token) {\n        this.map.delete(token);\n        return this;\n    }\n    /**\n     * @returns a list of tokens currently stored in the context.\n     */\n    keys() {\n        return this.map.keys();\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * Safely assert whether the given value is a URLSearchParams instance.\n *\n * In some execution environments URLSearchParams is not defined.\n */\nfunction isUrlSearchParams(value) {\n    return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nclass HttpRequest {\n    constructor(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        let options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? third : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = third;\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.context) {\n                this.context = options.context;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no context have been passed in, construct a new HttpContext instance.\n        if (!this.context) {\n            this.context = new HttpContext();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            const params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                const qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    serializeBody() {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            isUrlSearchParams(this.body) || typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return this.body.toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    detectContentTypeHeader() {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, boolean and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            typeof this.body === 'boolean') {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    }\n    clone(update = {}) {\n        var _a;\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        const method = update.method || this.method;\n        const url = update.url || this.url;\n        const responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        const body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        let headers = update.headers || this.headers;\n        let params = update.params || this.params;\n        // Pass on context if needed\n        const context = (_a = update.context) !== null && _a !== void 0 ? _a : this.context;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce((params, param) => params.set(param, update.setParams[param]), params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params,\n            headers,\n            context,\n            reportProgress,\n            responseType,\n            withCredentials,\n        });\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nvar HttpEventType;\n(function (HttpEventType) {\n    /**\n     * The request was sent out over the wire.\n     */\n    HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n    /**\n     * An upload progress event was received.\n     */\n    HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n    /**\n     * The response status code and headers were received.\n     */\n    HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n    /**\n     * A download progress event was received.\n     */\n    HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n    /**\n     * The full response including the body was received.\n     */\n    HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(HttpEventType || (HttpEventType = {}));\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nclass HttpResponseBase {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    constructor(init, defaultStatus = 200 /* Ok */, defaultStatusText = 'OK') {\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.ResponseHeader;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    clone(update = {}) {\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nclass HttpResponse extends HttpResponseBase {\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.Response;\n        this.body = init.body !== undefined ? init.body : null;\n    }\n    clone(update = {}) {\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n    constructor(init) {\n        // Initialize with a default status of 0 / Unknown Error.\n        super(init, 0, 'Unknown Error');\n        this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (this.status >= 200 && this.status < 300) {\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n        }\n        else {\n            this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n        }\n        this.error = init.error || null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody(options, body) {\n    return {\n        body,\n        headers: options.headers,\n        context: options.context,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\nclass HttpClient {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     */\n    request(first, url, options = {}) {\n        let req;\n        // First, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = first;\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\n            // provided.\n            // Figure out the headers.\n            let headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            let params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams({ fromObject: options.params });\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, url, (options.body !== undefined ? options.body : null), {\n                headers,\n                context: options.context,\n                params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        const events$ = of(req).pipe(concatMap((req) => this.handler.handle(req)));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        const res$ = events$.pipe(filter((event) => event instanceof HttpResponse));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        }));\n                    case 'blob':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        }));\n                    case 'text':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        }));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(map((res) => res.body));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n        }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     */\n    delete(url, options = {}) {\n        return this.request('DELETE', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    get(url, options = {}) {\n        return this.request('GET', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     */\n    head(url, options = {}) {\n        return this.request('HEAD', url, options);\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @param url The resource URL.\n     * @param callbackParam The callback function name.\n     *\n     */\n    jsonp(url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilites of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     */\n    options(url, options = {}) {\n        return this.request('OPTIONS', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    patch(url, body, options = {}) {\n        return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     */\n    post(url, body, options = {}) {\n        return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     */\n    put(url, body, options = {}) {\n        return this.request('PUT', url, addBody(options, body));\n    }\n}\nHttpClient.ɵfac = function HttpClient_Factory(t) { return new (t || HttpClient)(ɵngcc0.ɵɵinject(HttpHandler)); };\nHttpClient.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpClient, factory: HttpClient.ɵfac });\nHttpClient.ctorParameters = () => [\n    { type: HttpHandler }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClient, [{\n        type: Injectable\n    }], function () { return [{ type: HttpHandler }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\nclass HttpInterceptorHandler {\n    constructor(next, interceptor) {\n        this.next = next;\n        this.interceptor = interceptor;\n    }\n    handle(req) {\n        return this.interceptor.intercept(req, this.next);\n    }\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\nclass NoopInterceptor {\n    intercept(req, next) {\n        return next.handle(req);\n    }\n}\nNoopInterceptor.ɵfac = function NoopInterceptor_Factory(t) { return new (t || NoopInterceptor)(); };\nNoopInterceptor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: NoopInterceptor, factory: NoopInterceptor.ɵfac });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NoopInterceptor, [{\n        type: Injectable\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId = 0;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nclass JsonpCallbackContext {\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * @publicApi\n */\nclass JsonpClientBackend {\n    constructor(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n        /**\n         * A resolved promise that can be used to schedule microtasks in the event handlers.\n         */\n        this.resolvedPromise = Promise.resolve();\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     */\n    nextCallback() {\n        return `ng_jsonp_callback_${nextRequestId++}`;\n    }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     *\n     */\n    handle(req) {\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable((observer) => {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            const callback = this.nextCallback();\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n            // Construct the <script> tag and point it at the URL.\n            const node = this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            let body = null;\n            // Whether the response callback has been called.\n            let finished = false;\n            // Whether the request has been cancelled (and thus any other callbacks)\n            // should be ignored.\n            let cancelled = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            this.callbackMap[callback] = (data) => {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete this.callbackMap[callback];\n                // Next, make sure the request wasn't cancelled in the meantime.\n                if (cancelled) {\n                    return;\n                }\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            const cleanup = () => {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            const onLoad = (event) => {\n                // Do nothing if the request has been cancelled.\n                if (cancelled) {\n                    return;\n                }\n                // We wrap it in an extra Promise, to ensure the microtask\n                // is scheduled after the loaded endpoint has executed any potential microtask itself,\n                // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n                this.resolvedPromise.then(() => {\n                    // Cleanup the page.\n                    cleanup();\n                    // Check whether the response callback has run.\n                    if (!finished) {\n                        // It hasn't, something went wrong with the request. Return an error via\n                        // the Observable error path. All JSONP errors have status 0.\n                        observer.error(new HttpErrorResponse({\n                            url,\n                            status: 0,\n                            statusText: 'JSONP Error',\n                            error: new Error(JSONP_ERR_NO_CALLBACK),\n                        }));\n                        return;\n                    }\n                    // Success. body either contains the response body or null if none was\n                    // returned.\n                    observer.next(new HttpResponse({\n                        body,\n                        status: 200 /* Ok */,\n                        statusText: 'OK',\n                        url,\n                    }));\n                    // Complete the stream, the response is over.\n                    observer.complete();\n                });\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            const onError = (error) => {\n                // If the request was already cancelled, no need to emit anything.\n                if (cancelled) {\n                    return;\n                }\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error,\n                    status: 0,\n                    statusText: 'JSONP Error',\n                    url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return () => {\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\n                cancelled = true;\n                // Remove the event listeners so they won't run if the events later fire.\n                node.removeEventListener('load', onLoad);\n                node.removeEventListener('error', onError);\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    }\n}\nJsonpClientBackend.ɵfac = function JsonpClientBackend_Factory(t) { return new (t || JsonpClientBackend)(ɵngcc0.ɵɵinject(JsonpCallbackContext), ɵngcc0.ɵɵinject(DOCUMENT)); };\nJsonpClientBackend.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: JsonpClientBackend, factory: JsonpClientBackend.ɵfac });\nJsonpClientBackend.ctorParameters = () => [\n    { type: JsonpCallbackContext },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JsonpClientBackend, [{\n        type: Injectable\n    }], function () { return [{ type: JsonpCallbackContext }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * @publicApi\n */\nclass JsonpInterceptor {\n    constructor(jsonp) {\n        this.jsonp = jsonp;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param req The outgoing request object to handle.\n     * @param next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @returns An observable of the event stream.\n     */\n    intercept(req, next) {\n        if (req.method === 'JSONP') {\n            return this.jsonp.handle(req);\n        }\n        // Fall through for normal HTTP requests.\n        return next.handle(req);\n    }\n}\nJsonpInterceptor.ɵfac = function JsonpInterceptor_Factory(t) { return new (t || JsonpInterceptor)(ɵngcc0.ɵɵinject(JsonpClientBackend)); };\nJsonpInterceptor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: JsonpInterceptor, factory: JsonpInterceptor.ɵfac });\nJsonpInterceptor.ctorParameters = () => [\n    { type: JsonpClientBackend }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JsonpInterceptor, [{\n        type: Injectable\n    }], function () { return [{ type: JsonpClientBackend }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * @publicApi\n */\nclass HttpXhrBackend {\n    constructor(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     */\n    handle(req) {\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the HttpClientJsonpModule\n        if (req.method === 'JSONP') {\n            throw new Error(`Attempted to construct Jsonp request without HttpClientJsonpModule installed.`);\n        }\n        // Everything happens on Observable subscription.\n        return new Observable((observer) => {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            const xhr = this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                const detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                const responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = ((responseType !== 'json') ? responseType : 'text');\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            const reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            let headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            const partialFromXhr = () => {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                // Read status and normalize an IE9 bug (https://bugs.jquery.com/ticket/1450).\n                const status = xhr.status === 1223 ? 204 /* NoContent */ : xhr.status;\n                const statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                const url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers, status, statusText, url });\n                return headerResponse;\n            };\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            const onLoad = () => {\n                // Read response state from the memoized partial data.\n                let { headers, status, statusText, url } = partialFromXhr();\n                // The body will be read out if present.\n                let body = null;\n                if (status !== 204 /* NoContent */) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 /* Ok */ : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                let ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    const originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = { error, text: body };\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                }\n            };\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            const onError = (error) => {\n                const { url } = partialFromXhr();\n                const res = new HttpErrorResponse({\n                    error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                    url: url || undefined,\n                });\n                observer.error(res);\n            };\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progerss event.\n            let sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            const onDownProgress = (event) => {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                let progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            };\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            const onUpProgress = (event) => {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                let progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            };\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            xhr.addEventListener('timeout', onError);\n            xhr.addEventListener('abort', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send(reqBody);\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return () => {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('abort', onError);\n                xhr.removeEventListener('load', onLoad);\n                xhr.removeEventListener('timeout', onError);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                if (xhr.readyState !== xhr.DONE) {\n                    xhr.abort();\n                }\n            };\n        });\n    }\n}\nHttpXhrBackend.ɵfac = function HttpXhrBackend_Factory(t) { return new (t || HttpXhrBackend)(ɵngcc0.ɵɵinject(ɵngcc1.XhrFactory)); };\nHttpXhrBackend.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpXhrBackend, factory: HttpXhrBackend.ɵfac });\nHttpXhrBackend.ctorParameters = () => [\n    { type: XhrFactory$1 }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXhrBackend, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc1.XhrFactory }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nclass HttpXsrfTokenExtractor {\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nclass HttpXsrfCookieExtractor {\n    constructor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * @internal for testing\n         */\n        this.parseCount = 0;\n    }\n    getToken() {\n        if (this.platform === 'server') {\n            return null;\n        }\n        const cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    }\n}\nHttpXsrfCookieExtractor.ɵfac = function HttpXsrfCookieExtractor_Factory(t) { return new (t || HttpXsrfCookieExtractor)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(XSRF_COOKIE_NAME)); };\nHttpXsrfCookieExtractor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpXsrfCookieExtractor, factory: HttpXsrfCookieExtractor.ɵfac });\nHttpXsrfCookieExtractor.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: String, decorators: [{ type: Inject, args: [XSRF_COOKIE_NAME,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXsrfCookieExtractor, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }, { type: String, decorators: [{\n                type: Inject,\n                args: [XSRF_COOKIE_NAME]\n            }] }]; }, null); })();\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nclass HttpXsrfInterceptor {\n    constructor(tokenService, headerName) {\n        this.tokenService = tokenService;\n        this.headerName = headerName;\n    }\n    intercept(req, next) {\n        const lcUrl = req.url.toLowerCase();\n        // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n            lcUrl.startsWith('https://')) {\n            return next.handle(req);\n        }\n        const token = this.tokenService.getToken();\n        // Be careful not to overwrite an existing header of the same name.\n        if (token !== null && !req.headers.has(this.headerName)) {\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\n        }\n        return next.handle(req);\n    }\n}\nHttpXsrfInterceptor.ɵfac = function HttpXsrfInterceptor_Factory(t) { return new (t || HttpXsrfInterceptor)(ɵngcc0.ɵɵinject(HttpXsrfTokenExtractor), ɵngcc0.ɵɵinject(XSRF_HEADER_NAME)); };\nHttpXsrfInterceptor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpXsrfInterceptor, factory: HttpXsrfInterceptor.ɵfac });\nHttpXsrfInterceptor.ctorParameters = () => [\n    { type: HttpXsrfTokenExtractor },\n    { type: String, decorators: [{ type: Inject, args: [XSRF_HEADER_NAME,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXsrfInterceptor, [{\n        type: Injectable\n    }], function () { return [{ type: HttpXsrfTokenExtractor }, { type: String, decorators: [{\n                type: Inject,\n                args: [XSRF_HEADER_NAME]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\nclass HttpInterceptingHandler {\n    constructor(backend, injector) {\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n    }\n    handle(req) {\n        if (this.chain === null) {\n            const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n            this.chain = interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), this.backend);\n        }\n        return this.chain.handle(req);\n    }\n}\nHttpInterceptingHandler.ɵfac = function HttpInterceptingHandler_Factory(t) { return new (t || HttpInterceptingHandler)(ɵngcc0.ɵɵinject(HttpBackend), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };\nHttpInterceptingHandler.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpInterceptingHandler, factory: HttpInterceptingHandler.ɵfac });\nHttpInterceptingHandler.ctorParameters = () => [\n    { type: HttpBackend },\n    { type: Injector }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpInterceptingHandler, [{\n        type: Injectable\n    }], function () { return [{ type: HttpBackend }, { type: ɵngcc0.Injector }]; }, null); })();\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n */\nfunction interceptingHandler(backend, interceptors = []) {\n    if (!interceptors) {\n        return backend;\n    }\n    return interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\nclass HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     */\n    static disable() {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\n            ],\n        };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     */\n    static withOptions(options = {}) {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n            ],\n        };\n    }\n}\nHttpClientXsrfModule.ɵfac = function HttpClientXsrfModule_Factory(t) { return new (t || HttpClientXsrfModule)(); };\nHttpClientXsrfModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: HttpClientXsrfModule });\nHttpClientXsrfModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        HttpXsrfInterceptor,\n        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n    ] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientXsrfModule, [{\n        type: NgModule,\n        args: [{\n                providers: [\n                    HttpXsrfInterceptor,\n                    { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                    { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                    { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                    { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n                ]\n            }]\n    }], null, null); })();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientModule {\n}\nHttpClientModule.ɵfac = function HttpClientModule_Factory(t) { return new (t || HttpClientModule)(); };\nHttpClientModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: HttpClientModule });\nHttpClientModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        HttpClient,\n        { provide: HttpHandler, useClass: HttpInterceptingHandler },\n        HttpXhrBackend,\n        { provide: HttpBackend, useExisting: HttpXhrBackend },\n    ], imports: [[\n            HttpClientXsrfModule.withOptions({\n                cookieName: 'XSRF-TOKEN',\n                headerName: 'X-XSRF-TOKEN'\n            }),\n        ]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientModule, [{\n        type: NgModule,\n        args: [{\n                /**\n                 * Optional configuration for XSRF protection.\n                 */\n                imports: [\n                    HttpClientXsrfModule.withOptions({\n                        cookieName: 'XSRF-TOKEN',\n                        headerName: 'X-XSRF-TOKEN'\n                    }),\n                ],\n                /**\n                 * Configures the [dependency injector](guide/glossary#injector) where it is imported\n                 * with supporting services for HTTP communications.\n                 */\n                providers: [\n                    HttpClient,\n                    { provide: HttpHandler, useClass: HttpInterceptingHandler },\n                    HttpXhrBackend,\n                    { provide: HttpBackend, useExisting: HttpXhrBackend },\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HttpClientModule, { imports: [HttpClientXsrfModule] }); })();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientJsonpModule {\n}\nHttpClientJsonpModule.ɵfac = function HttpClientJsonpModule_Factory(t) { return new (t || HttpClientJsonpModule)(); };\nHttpClientJsonpModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: HttpClientJsonpModule });\nHttpClientJsonpModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        JsonpClientBackend,\n        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n    ] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientJsonpModule, [{\n        type: NgModule,\n        args: [{\n                providers: [\n                    JsonpClientBackend,\n                    { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                    { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n * @see `XhrFactory`\n * @deprecated\n * `XhrFactory` has moved, please import `XhrFactory` from `@angular/common` instead.\n */\nconst XhrFactory = XhrFactory$1;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpErrorResponse, HttpEventType, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, HttpInterceptingHandler as ɵHttpInterceptingHandler, NoopInterceptor as ɵangular_packages_common_http_http_a, JsonpCallbackContext as ɵangular_packages_common_http_http_b, jsonpCallbackContext as ɵangular_packages_common_http_http_c, XSRF_COOKIE_NAME as ɵangular_packages_common_http_http_d, XSRF_HEADER_NAME as ɵangular_packages_common_http_http_e, HttpXsrfCookieExtractor as ɵangular_packages_common_http_http_f, HttpXsrfInterceptor as ɵangular_packages_common_http_http_g };\n\n//# sourceMappingURL=http.js.map"]},"metadata":{},"sourceType":"module"}