{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport { catchError, retry } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let DatabaseService = /*#__PURE__*/(() => {\n  class DatabaseService {\n    constructor(http) {\n      this.http = http;\n      this.subject = new Subject();\n      this.profileData = new Subject();\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/x-www-form-urlencoded',\n          Authorization: 'Basic ' + localStorage.getItem('AppTokenKey')\n        })\n      };\n      this.httpOptions1 = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      console.log('API Token Key: ', localStorage.getItem('AppTokenKey'));\n      this.WebAPI = 'https://api.hrmsplus.in/api/';\n      this.PublicDomain = 'hrms.bigapollospectra.com'; // this.PublicDomain='localhost';\n    }\n\n    sendMenues(menu) {\n      console.log(menu);\n      this.subject.next(menu);\n    }\n\n    getMenues() {\n      return this.subject.asObservable();\n    }\n\n    sendProfile(profile) {\n      console.log(profile);\n      this.profileData.next(profile);\n    }\n\n    getProfile() {\n      return this.profileData.asObservable();\n    } // isAlreadyLogin(param: any) {\n    //   const res = this.http.post(this.WebAPI + 'Authentication/isAlreadyLogin', param);\n    //   return res;\n    // }\n\n\n    login(param) {\n      const res = this.http.post(this.WebAPI + 'Authentication/Login', param, this.httpOptions1);\n      return res;\n    } //https://api.hrmsplus.in/api/Employee/Profile?EmployeeCode=1002&DomainName=localhost&Token=B95AD3699D7D49308EA7838EEB988D34-1002\n\n\n    getProfileData(param) {\n      const res = this.http.get(this.WebAPI + `Employee/Profile?EmployeeCode=${param.EmpID}&DomainName=${this.PublicDomain}&Token=${localStorage.getItem('AppTokenKey')}`);\n      return res;\n    }\n\n    checkIn(param) {\n      const res = this.http.get(this.WebAPI + `Attendance/ValidateDevice?EmployeeCode=${param.EmpID}&DomainName=${this.PublicDomain}&Token=${localStorage.getItem('AppTokenKey')}`);\n      return res;\n    }\n\n    GetLocation(param) {\n      const res = this.http.get(this.WebAPI + `Employee/GetLocation?EmployeeCode=${param.EmpID}&DomainName=${this.PublicDomain}&Token=${localStorage.getItem('AppTokenKey')}`);\n      return res;\n    }\n\n    ValidateCheckin(param) {\n      const res = this.http.get(this.WebAPI + `Attendance/ValidateCheckin?EmployeeCode=${param.EmpID}&DomainName=${this.PublicDomain}&Token=${localStorage.getItem('AppTokenKey')}`);\n      return res;\n    }\n\n    CheckoutApi(param) {\n      const res = this.http.get(this.WebAPI + `Attendance/Checkout?EmployeeCode=${param.EmpID}&DomainName=${this.PublicDomain}&Token=${localStorage.getItem('AppTokenKey')}&AttendanceID=${localStorage.getItem('AttendanceID')}`);\n      return res;\n    }\n\n    createAttendance(param) {\n      const res = this.http.post(this.WebAPI + 'Attendance/Create', param, this.httpOptions1);\n      return res;\n    }\n\n    OTPVarification(handler) {\n      const res1 = this.http.post(this.WebAPI + 'Authentication/CheckOTP', handler);\n      return res1;\n    }\n\n    resetPassword(param) {\n      const res = this.http.get(this.WebAPI + `Authentication/ResetPassword?empcode=${param.empcode}&DomainName=${this.PublicDomain}`);\n      return res;\n    }\n\n    GetHeader() {\n      this.headers = new HttpHeaders(); // alert(localStorage.getItem('AppTokenKey'));\n\n      this.headers = this.headers.append('Authorization', 'Basic ' + localStorage.getItem('AppTokenKey'));\n      this.headers = this.headers.append('Accept', 'application/json');\n      this.headers = this.headers.append('Content-Type', 'application/x-www-form-urlencoded'); // this.headers = this.headers.append('AppDomain ', 'ZWxlYXJuLnZpamF5c3R1ZHljaXJjbGUuY29t');\n    }\n\n    examlist() {\n      this.GetHeader();\n      return this.http.get(this.WebAPI + 'Examination/ExamList', {\n        headers: this.headers\n      });\n    }\n\n    liveclasses() {\n      this.GetHeader();\n      return this.http.get(this.WebAPI + 'LiveClasses/GetLiveClass', {\n        headers: this.headers\n      });\n    }\n\n    assignment() {\n      this.GetHeader();\n      return this.http.get(this.WebAPI + 'Assignment/List', {\n        headers: this.headers\n      });\n    }\n\n    fee() {\n      this.GetHeader();\n      return this.http.get(this.WebAPI + 'LiveClasses/GetLiveClass', {\n        headers: this.headers\n      });\n    }\n\n    studymaterial() {\n      this.GetHeader();\n      return this.http.get(this.WebAPI + 'Assignment/StudyMaterial', {\n        headers: this.headers\n      });\n    }\n\n    vidoclass() {\n      this.GetHeader();\n      return this.http.get(this.WebAPI + 'Assignment/VideoClasses', {\n        headers: this.headers\n      });\n    }\n\n    examresult() {\n      this.GetHeader();\n      return this.http.get(this.WebAPI + 'Examination/GetResultSummry', {\n        headers: this.headers\n      });\n    }\n\n    profile() {\n      this.GetHeader();\n      const res1 = this.http.get(this.WebAPI + 'Student/Profile', {\n        headers: this.headers\n      });\n      return res1;\n    }\n\n    menuList() {\n      this.GetHeader();\n      const res1 = this.http.get(this.WebAPI + 'Apps/Menus', {\n        headers: this.headers\n      });\n      return res1;\n    }\n\n    examEnroll(param) {\n      this.GetHeader();\n      const res = this.http.post(this.WebAPI + 'Examination/Enroll', param, {\n        headers: this.headers\n      });\n      return res;\n    }\n\n    makeAttendance(param) {\n      this.GetHeader();\n      const res = this.http.post(this.WebAPI + 'LiveClasses/MakeAttendance', param, {\n        headers: this.headers\n      });\n      return res;\n    }\n\n    examquestion() {\n      this.GetHeader();\n      var param = {\n        enroll_id: localStorage.getItem('enroll_id')\n      };\n      const res = this.http.get(this.WebAPI + 'Examination/QuestionList', {\n        headers: this.headers,\n        params: param\n      });\n      return res;\n    }\n\n    AnswerSubmit(param) {\n      this.GetHeader();\n      return this.http.post(this.WebAPI + 'Examination/SubmitAnswer', param, {\n        headers: this.headers\n      });\n    }\n\n    PhotoAnswerSubmit(param) {\n      this.GetHeader();\n      return this.http.post(this.WebAPI + 'Examination/SubmitSinglePhotoAnswer', param, {\n        headers: this.headers\n      });\n    }\n\n    PhotoAnswerRemove(param) {\n      this.GetHeader();\n      return this.http.post(this.WebAPI + 'Examination/RemoveSinglePhotoAnswer', param, {\n        headers: this.headers\n      });\n    }\n\n    PreviewQuestion(_param) {\n      this.GetHeader();\n      const res1 = this.http.get(this.WebAPI + 'Examination/PreviewQuestionList', {\n        headers: this.headers,\n        params: _param\n      });\n      return res1;\n    }\n\n    PreviewQuestion_Photo(_param) {\n      this.GetHeader();\n      const res1 = this.http.get(this.WebAPI + 'Examination/PreviewPhotoQuestionList', {\n        headers: this.headers,\n        params: _param\n      });\n      return res1;\n    }\n\n    ExamSubmit(_param) {\n      this.GetHeader();\n      const res1 = this.http.get(this.WebAPI + 'Examination/ExamSubmit', {\n        headers: this.headers,\n        params: _param\n      });\n      return res1;\n    }\n\n    GetSubmitedAnswer(_param) {\n      this.GetHeader();\n      const res1 = this.http.get(this.WebAPI + 'Examination/GetSubmitedAnswer', {\n        headers: this.headers,\n        params: _param\n      });\n      return res1;\n    }\n\n    GetSetting() {\n      this.GetHeader();\n      const res = this.http.get(this.WebAPI + 'School/GetSetting', {\n        headers: this.headers\n      });\n      return res;\n    }\n\n    GetSMSBox() {\n      this.GetHeader();\n      const res = this.http.get(this.WebAPI + 'School/GetSMS', {\n        headers: this.headers\n      });\n      return res;\n    }\n\n    SetSMSRead(param) {\n      this.GetHeader();\n      return this.http.post(this.WebAPI + 'School/SetSMSRead', param, {\n        headers: this.headers\n      });\n    }\n\n    GetDemandList() {\n      this.GetHeader();\n      const res = this.http.get(this.WebAPI + 'Demand/DemandList', {\n        headers: this.headers\n      });\n      return res;\n    }\n\n    GetDemandDetail(_param) {\n      this.GetHeader();\n      const res = this.http.get(this.WebAPI + 'Demand/DemandDetail', {\n        headers: this.headers,\n        params: _param\n      });\n      return res;\n    }\n\n    CreateDemandTrans(_param) {\n      this.GetHeader();\n      const res = this.http.get(this.WebAPI + 'Demand/CreateDemandTrans', {\n        headers: this.headers,\n        params: _param\n      });\n      return res;\n    } ///////////////////\n\n\n    studentProfile(data) {\n      return this.http.get(this.WebAPI + 'Student/Profile', this.httpOptions).pipe(retry(0), catchError(this.handleError));\n    }\n\n    handleError(handleError) {\n      throw new Error('Method not implemented.');\n    }\n\n  }\n\n  DatabaseService.ɵfac = function DatabaseService_Factory(t) {\n    return new (t || DatabaseService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  DatabaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DatabaseService,\n    factory: DatabaseService.ɵfac,\n    providedIn: 'root'\n  });\n  return DatabaseService;\n})();","map":null,"metadata":{},"sourceType":"module"}